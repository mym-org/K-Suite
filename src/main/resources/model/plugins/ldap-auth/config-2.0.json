{
  "name": "ldap-auth",
  "version": "1.0.x",
  "functionality": "Authentication",
  "icon": "/images/plugins/ldap-auth.png",
  "hubDesc": "Integrate Kong with a LDAP server",
  "description": "Add LDAP Bind Authentication to a Route with username and password protection. The plugin will check for valid credentials in the <code class=\"highlighter-rouge\">Proxy-Authorization</code> and <code class=\"highlighter-rouge\">Authorization</code> header (in this order).",
  "supportKongVersions": [
    "2.0","2.1"
  ],
  "no_consumer": true,
  "fields": [
    {
      "name": "hide_credentials",
      "component": "Switch",
      "type": "boolean",
      "value": false,
      "restrict": "optional",
      "help": "An optional boolean value telling the plugin to hide the credential to the upstream server. It will be removed by Kong before proxying the request."
    },
    {
      "name": "ldap_host",
      "component": "Input",
      "type": "String",
      "restrict": "",
      "help": "Host on which the LDAP server is running."
    },
    {
      "name": "ldap_port",
      "component": "InputNumber",
      "type": "number",
      "restrict": "",
      "help": "TCP port where the LDAP server is listening."
    },
    {
      "name": "start_tls",
      "component": "Switch",
      "type": "boolean",
      "value": false,
      "restrict": "",
      "help": "Set it to true to issue StartTLS (Transport Layer Security) extended operation over ldap connection."
    },
    {
      "name": "ldaps",
      "component": "Switch",
      "type": "boolean",
      "value": false,
      "restrict": "",
      "help": "Set it to true to connect using the LDAPS protocol (LDAP over TLS)"
    },
    {
      "name": "base_dn",
      "component": "Input",
      "type": "String",
      "restrict": "",
      "help": "Base DN as the starting point for the search."
    },
    {
      "name": "verify_ldap_host",
      "component": "Switch",
      "type": "boolean",
      "value": false,
      "restrict": "",
      "help": "Set it to true to authenticate LDAP server. The server certificate will be verified according to the CA certificates specified by the lua_ssl_trusted_certificate directive."
    },
    {
      "name": "attribute",
      "component": "Input",
      "type": "String",
      "restrict": "",
      "help": "Attribute to be used to search the user."
    },
    {
      "name": "cache_ttl",
      "component": "InputNumber",
      "type": "number",
      "value": 60,
      "restrict": "",
      "help": "Cache expiry time in seconds."
    },
    {
      "name": "timeout",
      "component": "InputNumber",
      "type": "number",
      "value": 10000,
      "restrict": "optional",
      "help": "An optional timeout in milliseconds when waiting for connection with LDAP server."
    },
    {
      "name": "keepalive",
      "component": "InputNumber",
      "type": "number",
      "value": 60000,
      "restrict": "optional",
      "help": "An optional value in milliseconds that defines for how long an idle connection to LDAP server will live before being closed."
    },
    {
      "name": "anonymous",
      "component": "SelectConsumer",
      "type": "String",
      "restrict": "optional",
      "none_value": null,
      "help": "An optional string (consumer uuid) value to use as an “anonymous” consumer if authentication fails. If empty (default), the request will fail with an authentication failure 4xx. Please note that this value must refer to the Consumer id attribute which is internal to Kong, and not its custom_id."
    },
    {
      "name": "header_type",
      "component": "Input",
      "type": "String",
      "value": "ldap",
      "restrict": "optional",
      "help": "An optional string to use as part of the Authorization header. By default, a valid Authorization header looks like this: Authorization: ldap base64(username:password). If header_type is set to “basic” then the Authorization header would be Authorization: basic base64(username:password). Note that header_type can take any string, not just \"ldap\" and \"basic\"."
    }
  ],
  "methods": {
    "add": {
      "method": "POST",
      "url": "/plugins/"
    },
    "update": {
      "method": "PATCH",
      "url": "/plugins/{id}"
    }
  }
}